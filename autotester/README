Quick Start Guide
=================

Only program which support the UCI protocol can be used.
(See section "Gotcha" at end for typical problems.)

0. Type 'make' to compile the binary for the autotester (lauto.jar)

1. make a configuration file called mytest.txt
   An example can be found in tests/basic.txt.
   note: configuration MUST end with '.txt' extension.

2. run: java -jar lauto.jar mytest.txt 
    or: java -jar lauto.jar mytest
    note: extension is optional

3. game results stored in mytest.pgn
   (note: Results will be found in the same directory in which you store the configuration file,
    not where you invoked lauto.jar.)


How to build a configuration file:
Here is a minimal configuration file example:

-----[ minimal.txt ]-----

cpus = 12
title = My funky test
game_rounds = 50
adjudicate = 200         

# now we have the player definitions
# --

player = depth_1
invoke = myLeiserchsee
depth = 1

player = depth_2
invoke = myLeiserchess 
depth = 2

player = depth_3
invoke = myLeiserchess 
depth = 3

-----[ snip ]-----


Note that each player section must being with:

player = 
invoke =

all options beyond that can be in arbitrary order. 


The header must have at least:

cpus = N      
book = book.dta

The title is optional and is placed in the PGN files as the PGN event tag.
The book specifies the opening book moves; currently we only provide book.dta.

The number of game rounds to play (i.e., "game_rounds") is optional, if left out,
1000 rounds are played by each pair of players by default.  Note that each round for
a given pair constitutes two games, with a given player being White in one game 
and Black in another.

"adjudicate = N" is optional and defaults to 400.  It defines the
number of moves to be played before declaring a game as drawn.  A move
is 2 ply or 1 move by each side.

The tester supports several types of level of play and any option
defined by a given program via the UCI protocol (for leiserchess, use 
'uci' command to see supported options).  A program could expose 
hundreds of user configurable options this way and they can all
be tested.  

Example:
player = myLeiserchess-test
invoke = <path to your player binary> 
hash = 64
lmr_r1 = 5


--- FAMILY ---

The tester also flexibly supports a mode where you can prevent some
programs from playing others.   This can be used when testing several
version of your program against foreign programs for instance where
you do not want different versions of your own program to play each
other.  This is specified by the "family" option:

family = myprogram

All programs belong to a family, but if it is not specified it becomes
the same as the player name.  The rule is that no program plays
another program in the same "family."

Example:

----------[ family example ]----------
cpus = 4
title = foreign program test

# now we have the player definitions
# --

player = Master 
invoke = leiserchessPro 
fis = 6 0.1

player = Joes_program
invoke = joe
fis = 6 0.1

player = Fred
invoke = fred_khet
fis = 6 0.1

player = myPlayer1.0 
invoke = leiserchess.1.0
fis = 6 0.1
family = myLeiserchess 

player = myPlayer1.1
invoke = leiserchess.1.1
fis = 6 0.1
family = myLeiserchess 

player = myPlayer1.2
invoke = leiserchess.1.2
fis = 6 0.1
family = myLeiserchess

----------[ snip ]----------


LEVELS
------

depth = N      
   specify a fixed depth for all moves

fis = main inc   
   main: main time in seconds 
   inc: fischer increment in seconds
   note: time can be integer or decimal 

tc = moves sec {moves sec}
   moves: number of moves
   sec: number of seconds to make time control
   note: additional time periods repeat last specified time period

nodes = N
   N: number of nodes.   
   note: play exactly N nodes then return a move
   note: commas can be inserted. example:  nodes = 1,000,000 


GOTCHA - some typical problems that could stall you
---------------------------------------------------

1. If you are windows user, the invoke line needs to show the '.exe'
   extension.

2. player names must not include spaces.  It may work if quoted but
   this has not been tested.  This may also be true of the "invoke"
   line.

3. The equal ('=') character must not appear twice in any line.  Do
   not create program options in your program that use the '='
   character.  (Note: needs to be tested and fixed)

4. A bug in version 1.0 and prior does not let you properly test with
   cpus = 1, you must set to 2 or more. (Note: needs to be fixed)

5. option names are case sensitive, even though the UCI protocol does
   not require that.  The tester does.  So if your program defines an
   option the configuration must match case exactly.   

   The rationale for this "bug" is that when the tester was originally
   designed for chess some chess programs did not honor the case
   insensitive rule and thus there is no harm to specify options the
   way the user program specifies them.

6. Due to a bug in the tester, if your program publishes an option
   with spaces in it, there must never be more than one consecutive
   space.
  
7.  UCI protocol specifies that an option name or value cannot contain
    the words, "name" or "value" - this is a wart in the original UCI
    protocol that UCI is based on.  The protocol uses the tokens "name"
    and "value" as delimiters when parsing so you cannot use them.
    
    So do not publish an option name such as:  "anibus value"


