diff --git a/player/move_gen.c b/player/move_gen.c
index 20ad7b1..e317751 100644
--- a/player/move_gen.c
+++ b/player/move_gen.c
@@ -200,6 +200,9 @@ int reflect_of(int beam_dir, int pawn_ori) {
   return reflect[beam_dir][pawn_ori];
 }
 
+piece_t ptype_mv_of(move_t mv) {
+  return (mv >> PTYPE_MV_SHIFT) & PTYPE_MV_MASK;
+}
 
 square_t from_square(move_t mv) {
   return (mv >> FROM_SHIFT) & FROM_MASK;
diff --git a/player/move_gen.h b/player/move_gen.h
index 98b8ef0..8fdfa4e 100644
--- a/player/move_gen.h
+++ b/player/move_gen.h
@@ -168,6 +168,7 @@ int square_to_str(square_t sq, char *buf);
 int dir_of(int i);
 int beam_of(int direction);
 int reflect_of(int beam_dir, int pawn_ori);
+piece_t ptype_mv_of(move_t mv);
 square_t from_square(move_t mv);
 square_t to_square(move_t mv);
 rot_t rot_of(move_t mv);
diff --git a/player/search.c b/player/search.c
index 8bac859..b819d0b 100644
--- a/player/search.c
+++ b/player/search.c
@@ -174,7 +174,7 @@ static void update_best_move_history(position_t *p, int index_of_best,
 
   for (int i = 0; i < count; i++) {
     move_t   mv  = get_move(lst[i]);
-    ptype_t  pce = ptype_of(mv);
+    ptype_t  pce = ptype_mv_of(mv);
     rot_t    ro  = rot_of(mv);   // rotation
     square_t fs  = from_square(mv);
     int      ot  = ORI_MASK & (ori_of(p->board[fs]) + ro);
@@ -341,7 +341,7 @@ static score_t scout_search(position_t *p, score_t beta, int depth,
       set_sort_key(&move_list[mv_index], SORT_MASK - 2);
       // move_list[mv_index] |= (SORT_MASK - 2) << SORT_SHIFT;
     } else {
-      ptype_t  pce = ptype_of(mv);
+      ptype_t  pce = ptype_mv_of(mv);
       rot_t    ro  = rot_of(mv);   // rotation
       square_t fs  = from_square(mv);
       int      ot  = ORI_MASK & (ori_of(p->board[fs]) + ro);
@@ -534,7 +534,7 @@ static score_t searchPV(position_t *p, score_t alpha, score_t beta, int depth,
       set_sort_key(&move_list[mv_index], SORT_MASK - 2);
       // move_list[mv_index] |= (SORT_MASK - 2) << SORT_SHIFT;
     } else {
-      ptype_t  pce = ptype_of(mv);
+      ptype_t  pce = ptype_mv_of(mv);
       rot_t    ro  = rot_of(mv);   // rotation
       square_t fs  = from_square(mv);
       int      ot  = ORI_MASK & (ori_of(p->board[fs]) + ro);
